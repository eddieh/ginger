; Copyright 2009 by James Dean Palmer and others.
;
; Licensed under the Apache License, Version 2.0 (the "License"); 
; you may not use this file except in compliance with the License. 
; You may obtain a copy of the License at 
;
;   http://www.apache.org/licenses/LICENSE-2.0 
;
; Unless required by applicable law or agreed to in writing, software 
; distributed under the License is distributed on an "AS IS" BASIS, 
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
; See the License for the specific language governing permissions and 
; limitations under the License. 
;
; Please report all bugs and problems to "bugs@ging3r.org".

include "compiler.gin"

define ginger-version "20100119"
define banner (String::append "This is Ginger, version " ginger-version)

define output-c false
define output-h false
define output-c-file-name false
define output-h-file-name false
define input-file-name false

define print-debug-tree false
define print-debug-tree-with-includes false
define print-debug-tree-after-chunk-expand false

define compile false ; aka tangle
define objC false
define fltk false
define opengl false
define cairo false
define pango false

define literate false ; aka weave
define allowed-compile-target (list 'c 'asm)
define compile-target (first allowed-compile-target)
define allowed-literate-target (list 'pdf 'tex 'html)
define literate-target (first allowed-literate-target)

define print-version ()
  println ""
  println banner
  println ""
  println "Copyright 2007-2009, James Dean Palmer"
  println ""
  println "Complete documentation for Ginger, including Frequently Asked Questions"
  println "can be found at http://ging3r.org/"

define process-arguments (args)
  if (not (Null? args))
    if (String::eq? (first args) "--version")
      print-version
      exit
    elsif: (String::eq? (first args) "--compile")
      set compile true
      process-arguments (second* args)
    elsif: (String::eq? (first args) "--literate")
      set literate true
      process-arguments (second* args)
    elsif: (String::eq? (String::substring (first args) 0 8) "--target")

      define target null
      define tmp (String::split (first args) =_)
      if (= (length tmp) 2)
        set target (String->Symbol (second tmp))
      ; check if user provided a target
      if (or (Null? target) (eq? false target))
        println "target not supplied"
        exit
      
      if compile
        ; check for valid target
        if (not (contains? allowed-compile-target target))
          println "target " target " is not supported"
          exit
        set compile-target target
      elsif: literate
        ; check for valid target
        if (not (contains? allowed-literate-target target))
          println "target " target " is not supported"
          exit
        set literate-target target

      process-arguments (second* args)

    elsif: (String::eq? (first args) "--cairo")
      set cairo true
      process-arguments (second* args)
    elsif: (String::eq? (first args) "--pango")
      set pango true
      process-arguments (second* args)
    elsif: (String::eq? (first args) "--print-debug-tree")
      set print-debug-tree true
      process-arguments (second* args)
    elsif: (String::eq? (first args) "--print-debug-tree-with-includes")
      set print-debug-tree-with-includes true
      process-arguments (second* args)
    elsif: (String::eq? (first args) "--print-debug-tree-after-chunk-expand")
      set print-debug-tree-after-chunk-expand true
      process-arguments (second* args)
    elsif: (String::eq? (first args) "-o")
      set output-c-file-name (second args)
      process-arguments (third* args)
    else:
      set input-file-name (first args)
      process-arguments (second* args)

process-arguments (second* (command-line))

if (not input-file-name)
  println "Error: no input file"
  exit

println "The Literate Gingerbread Man: Opening file.."

define tree-head (<group>::make 0)
trait! tree-head 'begin true

println "Inserting auto includes.."
define std-include (append (cons 'include (Dict::make 'parent null 'paren-balance 0 'parse-indent 0 'line 0 'column 0 'begin false) null) (cons "std.gin" null null))
first! tree-head std-include
second*! tree-head (<group>::make 0)

; Read input file
println "Reading " input-file-name
define input (open-input-file input-file-name)
read input (second* tree-head)
close-input-stream input

properties! tree-head (properties (second* tree-head))
trait! tree-head 'includes (pair (first tree-head) (trait tree-head 'includes))
trait! (first tree-head) 'parent tree-head

println (trait tree-head 'includes)

if print-debug-tree
  println tree-head

println "Expand includes.."
expand-includes tree-head

if print-debug-tree-with-includes
  println tree-head

if literate
  println "Literate (weave) => " literate-target
  include "literate.gin"
  Literate::weave-pdf (base-name input-file-name) tree-head

if compile
  define expand-chunks (tree)
    define chunks (Dict::make)

    define chunk-name (node)
      object->string (first (second* node))

    define chunk? (node)
      if (Cons? node)
        if (Symbol? (first node))
          if (Cons? (properties node))
            false
          else:
            if (Symbol::eq? (first node) 'chunk)
              true
            else:
              false
        else:
          false
      else:
        false
    
    define discover-chunks (tree)
      ; find chunks and add them to chunk dict based on names
      if (Null? tree)
        null
      elsif: (not (Cons? tree))
        null
      elsif: (chunk? tree)
        println "Discovered " (chunk-name tree)
        define chunk-def (first (second* (second* tree)))
        ;println "  def => " chunk-def
        Dict::set chunks (chunk-name tree) chunk-def
      else:
        ; TODO - make this iterative
        if (list? (first tree))
          discover-chunks (first tree)
        discover-chunks (second* tree)
        
    println "Discovering chunks.."
    discover-chunks tree

    define expand-chunk-calls (tree)
      define chunk-call? (node)
        if (and (Cons? node) (Cons? (first node)) (Symbol? (first (first node))))
          eq? (first (first node)) '$
        ;and (Symbol? (first node)) (eq? (first node) '$)
      
      define macro-key (node)
        String::append 
        .. "(String::append " 
        .. (object->string (first (second* (first node)))) 
        .. " )"        
        ;String::append "(String::append " (object->string (first (second* node))) " )"
      
      define expand-chunk-call (node)
        println "Expanding chunk: " (macro-key node)

        define macro-def (Dict::get chunks (macro-key node))

        if (not macro-def)
          ;println "Couldn't find chunk " (macro-key node)
          println "Error on line " (Dict::get (properties node) 'line) ": couldn't find chunk " (macro-key node) "."
          exit

        set macro-def (List::duplicate macro-def)
        define old-second* (second* node) ; (second* (last* node))
        first! node (first  macro-def)
        define z (last* macro-def)
        second*! z old-second*
        second*! node (second* macro-def)
        
        expand-chunk-calls node ; macro-def
        
      if (Null? tree)
        null
      else:
        if (chunk-call? tree)
          ;println "Found chunk call"
          ;println tree
          expand-chunk-call tree
        ;else:
        if (list? (first tree)) 
          expand-chunk-calls (first tree)
        expand-chunk-calls (second* tree)

    println "Expanding chunks.."
    if (Dict::get chunks "*")
      expand-chunk-calls (Dict::get chunks "*")

    ; return the new tree
    if (Dict::get chunks "*")
      Dict::get chunks "*"
    else:
      tree
  
  set tree-head (expand-chunks tree-head)

  if print-debug-tree-after-chunk-expand
    println "Tree after expanding chunks: "
    println tree-head
  
  define base-file-name (base-name input-file-name)

  if (not output-c-file-name)
    set output-c-file-name (String::append base-file-name ".c")
    set output-h-file-name (String::append base-file-name ".h")

  ; Open the file for output.
  set output-c (open-output-file output-c-file-name)
  set output-h (open-output-file output-h-file-name)

  println "Writing " output-h-file-name
  println output-h "#include <stdio.h>"
  println output-h "#include <stdlib.h>"
  println output-h "#include <string.h>"
  println output-h "#define PROG 1"
  println output-h "#include \"ginger.h\""

  println "Writing " output-c-file-name
  println output-c "#include \"" output-h-file-name "\""

  define flat-functions (list)
  define local-variables (list)
  define tmp-variables (list)
  define glob 0
  define glob-stack (list 0)
  define func-def-exp-number 0  ; function definition expansion number

  println "Flatten functions.."
  flatten-functions tree-head

  println "Discover local variables.."
  each i flat-functions
    discover-local-variables i 'function

  discover-local-variables tree-head 'main
   
  ; Discover quoted symbols
  println "Discover quoted symbols.."
  discover-quoted-symbols tree-head
   
  println "Writing quoted symbols.."
  println output-c "char* qsdef[] = {"
  define qdef-index 0
  each i quoted-symbols
    if (Symbol? i)
      set i (Symbol->String i)
    if (= (String::length i) 1)
      define n (Char->Integer (String::nth i 0))
      println output-c "#define qsdef___" (name->c-name i) " " (Fixnum->String n)
    else:
      println output-c "\"" i "\","
      println output-c "#define qsdef___" (name->c-name i) " " (Fixnum->String (+ qdef-index 2048))
      ++ qdef-index
  println output-c "};"
  println output-c "int qsdef_count = " qdef-index ";"
   
  ; Discover classes
  define cdef-count 0
  println "Writing class definitions.."
  each i local-variables
    if (eq? (fifth i) 'class)
      println output-c "#define cdef___" (name->c-name (third i)) " " (Fixnum->String cdef-count)
      ++ cdef-count
  println output-c "GingerClassDefinition cdef[" (Fixnum->String cdef-count) "];"
  println output-c "int cdef_count = " (Fixnum->String cdef-count) ";"
   
  println output-c "GLOBALS"
  println output-c "BEGIN_CODE"
   
  println "Writing function definitions"
  function-definition-expansion tree-head 'main
  each i flat-functions
    function-definition-expansion i 'function
   
  println output-c "MID_CODE"
   
  println "Expand flattened functions"
  each i flat-functions
    function-expansion i 'function
   
  println "Main..."
  println output-c "main_entry:"
  function-expansion tree-head 'main
   
  println output-c "END_CODE"
   
  println "Expand prototypes"
  function-prototype-expansion tree-head 'main
  each i flat-functions
    function-prototype-expansion i 'function
  
  ; Close the output-c file.
  close-output-stream output-c
  close-output-stream output-h
   
  ; Gather information about the environment
  define GIN-C (getenv "GIN_C" "gcc")
  define GIN-CFLAGS (getenv "GIN_CFLAGS" "")
  define GIN-LDFLAGS (getenv "GIN_LDFLAGS" "-L. -lginger")
  define GIN-INCLUDE-PATH (getenv "GIN_INCLUDE_PATH" "")
  define GIN-IMPORT-PATH (getenv "GIN_IMPORT_PATH" "")
   
  ; TODO - this should be a compiler flag
  ; show all warnings
  set GIN-CFLAGS (String::append GIN-CFLAGS " -Wall ")
  ;set GIN-LDFLAGS (String::append GIN-LDFLAGS " ")
   
  ; TODO - this should be a compiler flag
  ; add debugging symbols
  set GIN-CFLAGS (String::append GIN-CFLAGS " -g ")
  ;set GIN-LDFLAGS (String::append GIN-LDFLAGS " ")
   
  set GIN-CFLAGS (String::append GIN-CFLAGS " -Ilib ")
  set GIN-LDFLAGS (String::append GIN-LDFLAGS " -Llib -lginger ")

  ; Add mode specific flags.
  if (cairo)
    println "Using Cairo."
    set GIN-CFLAGS (String::append GIN-CFLAGS " $(pkg-config --cflags cairo) -arch i386 ")
    set GIN-LDFLAGS (String::append GIN-LDFLAGS " $(pkg-config --libs cairo) -arch i386 ")

  if (pango)
    println "Using Pango."
    set GIN-CFLAGS (String::append GIN-CFLAGS " $(pkg-config --cflags pangocairo) -arch i386 ")
    set GIN-LDFLAGS (String::append GIN-LDFLAGS " $(pkg-config --libs pangocairo) -arch i386 ")

  if (objC)
    println "Using ObjC (and Cocoa)."
    set GIN-LDFLAGS (String::append GIN-LDFLAGS " -framework Cocoa ")

  ; Compile the program.
  if (eq? compile true)
    println (String::append "Compiling with " GIN-C)
    println GIN-CFLAGS
    println GIN-LDFLAGS
    if (and fltk (not opengl))
      execute (String::append GIN-C " " GIN-CFLAGS " -c fltk-support.cxx")
      execute (String::append GIN-C " " GIN-CFLAGS " -c " output-c-file-name)
      execute (String::append GIN-C " " GIN-CFLAGS " -o " base-file-name " fltk-support.o " base-file-name ".o " GIN-LDFLAGS)
    elsif: (and fltk opengl)
      execute (String::append GIN-C " " GIN-CFLAGS " -c fltk-support.cxx")
      execute (String::append GIN-C " " GIN-CFLAGS " -c gin-glwindow.cxx")
      execute (String::append GIN-C " " GIN-CFLAGS " -c " output-c-file-name)
      execute (String::append GIN-C " -o " base-file-name " fltk-support.o gin-glwindow.o " base-file-name ".o " GIN-LDFLAGS)
    elsif: pango
      execute (String::append GIN-C " " GIN-CFLAGS " -c pango-support.c")
      execute (String::append GIN-C " " GIN-CFLAGS " -c " output-c-file-name)
      execute (String::append GIN-C " " GIN-CFLAGS " -o " base-file-name " pango-support.o " base-file-name ".o " GIN-LDFLAGS)
    else:
      execute (String::append GIN-C " " GIN-CFLAGS " " output-c-file-name " -o " base-file-name " " GIN-LDFLAGS)
      println (String::append GIN-C " " GIN-CFLAGS " " output-c-file-name " -o " base-file-name " " GIN-LDFLAGS)
    println "Executable: " base-file-name

  println "Done."
