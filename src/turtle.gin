; Copyright 2009 by James Dean Palmer and others.
;
; Licensed under the Apache License, Version 2.0 (the "License"); 
; you may not use this file except in compliance with the License. 
; You may obtain a copy of the License at 
;
;   http://www.apache.org/licenses/LICENSE-2.0 
;
; Unless required by applicable law or agreed to in writing, software 
; distributed under the License is distributed on an "AS IS" BASIS, 
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
; See the License for the specific language governing permissions and 
; limitations under the License. 
;
; Please report all bugs and problems to "bugs@ging3r.org".

include "cairo.gin"

define surface 0
define context 0

define turtle-graphics-init ((width 500) (height 500))
  set surface (cairo-image-surface-create width height)
  set context (cairo-create surface)
  cairo-use-cartesian-coordinate-system context width height

define turtle-graphics-clear-screen ()
  <cairo>-set-source-rgb context 1.0 1.0 1.0
  <cairo>-paint context

turtle-graphics-init
turtle-graphics-clear-screen

; set to black
<cairo>-set-source-rgb context 0.0 0.0 0.0

define <turtle> make ((x 0.0) (y 0.0))
  Vector::make x y 0 true

define <turtle> unmake ()
  noop

register-class <turtle> null <turtle>::make <turtle>::unmake

; Selectors
define <turtle> get-x (self)
  Vector::get self 0

define <turtle> get-y (self)
  Vector::get self 1

define <turtle> get-heading (self)
  Vector::get self 2

define <turtle> pen-up? (self)
  not (Vector::get self 3)

; outputs TRUE if the pen is down, FALSE if it's up. 
define <turtle> pen-down? (self)
  Vector::get self 3
  
; Mutators
define <turtle> set-x (self x)
  Vector::set self 0 x

define <turtle> set-y (self y)
  Vector::set self 1 y

define <turtle> set-heading (self heading)
  Vector::set self 2 heading

; down => true
; up => flase
define <turtle> set-pen (self state)
  Vector::set self 3 state

; Realative Turtle Motion
define <turtle> forward (self dist)
  <cairo>-move-to context (<turtle>::get-x self) (<turtle>::get-y self)
  <turtle>::set-x self (+ (<turtle>::get-x self) (* (cos (degree->radian (<turtle>::get-heading self))) dist))
  <turtle>::set-y self (+ (<turtle>::get-y self) (* (sin (degree->radian (<turtle>::get-heading self))) dist))
  if (<turtle>::pen-down? self)
    <cairo>-line-to context (<turtle>::get-x self) (<turtle>::get-y self)
    <cairo>-stroke context
  else:
    <cairo>-move-to context (<turtle>::get-x self) (<turtle>::get-y self)

define <turtle> back (self dist)
  <cairo>-move-to context (<turtle>::get-x self) (<turtle>::get-y self)
  <turtle>::set-x self (- (<turtle>::get-x self) (* (cos (degree->radian (<turtle>::get-heading self))) dist))
  <turtle>::set-y self (- (<turtle>::get-y self) (* (sin (degree->radian (<turtle>::get-heading self))) dist))
  if (<turtle>::pen-down? self)
    <cairo>-line-to context (<turtle>::get-x self) (<turtle>::get-y self)
    <cairo>-stroke context
  else:
    <cairo>-move-to context (<turtle>::get-x self) (<turtle>::get-y self)

; turns the turtle counterclockwise by the specified angle, measured in degrees (1/360 of a circle).
define <turtle> left (self deg)
  <turtle>::right self (* deg -1.0)

; turns the turtle clockwise by the specified angle, measured in degrees (1/360 of a circle).
define <turtle> right (self deg)
  <turtle>::set-heading self (- (<turtle>::get-heading self) deg)
  if (>= (<turtle>::get-heading self) 360)
    <turtle>::set-heading self (- (<turtle>::get-heading self) 360)
  if (< (<turtle>::get-heading self) 0)
    <turtle>::set-heading self (+ (<turtle>::get-heading self) 360)

; Pen and Background
define <turtle> pen-down (self)
  <turtle>::set-pen self true

define <turtle> pen-up (self)
  <turtle>::set-pen self false

define <turtle> print-info (self)
  println (<turtle>::get-x self)
  println (<turtle>::get-y self)
  println (<turtle>::get-heading self)
  println (<turtle>::pen-down? self)

;;;
;;; Basic turtle
;;;

define default-turtle (<turtle>::make)
define default-scale 1.0

define home ()
  <turtle>::set-x default-turtle 0
  <turtle>::set-y default-turtle 0
  <turtle>::set-heading default-turtle 0

define forward (d)
  <turtle>::forward default-turtle (* d default-scale)

define move (d)
  <turtle>::pen-up default-turtle
  <turtle>::forward default-turtle (* d default-scale)
  <turtle>::pen-down default-turtle

define turn (a)
  <turtle>::right default-turtle a

define scale (s)
  set default-scale (* s default-scale)

define pen-color (r g b)
  <cairo>-set-source-rgb context r g b

define save-as-png (filename)
  <cairo>-surface-write-to-png surface filename

