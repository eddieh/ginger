; Copyright 2009 by James Dean Palmer and others.
;
; Licensed under the Apache License, Version 2.0 (the "License"); 
; you may not use this file except in compliance with the License. 
; You may obtain a copy of the License at 
;
;   http://www.apache.org/licenses/LICENSE-2.0 
;
; Unless required by applicable law or agreed to in writing, software 
; distributed under the License is distributed on an "AS IS" BASIS, 
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
; See the License for the specific language governing permissions and 
; limitations under the License. 
;
; Please report all bugs and problems to "bugs@ging3r.org".

inline-c-header "#include <pango/pangocairo.h>"
inline-c-header "#include \"pango-support.h\""
include "cairo.gin"

define PANGO-SCALE (inline-c result "= GIN_IM_FROM_INT(PANGO_SCALE);")

define PANGO-WEIGHT-THIN (inline-c result "= GIN_IM_FROM_INT(PANGO_WEIGHT_THIN);")
define PANGO-WEIGHT-ULTRALIGHT (inline-c result "= GIN_IM_FROM_INT(PANGO_WEIGHT_ULTRALIGHT);")
define PANGO-WEIGHT-LIGHT (inline-c result "= GIN_IM_FROM_INT(PANGO_WEIGHT_LIGHT);")
define PANGO-WIGHT-BOOK (inline-c result "= GIN_IM_FROM_INT(PANGO_WEIGHT_BOOK);")
define PANGO-WEIGHT-NORMAL (inline-c result "= GIN_IM_FROM_INT(PANGO_WEIGHT_NORMAL);")
define PANGO-WEIGHT-MEDIUM (inline-c result "= GIN_IM_FROM_INT(PANGO_WEIGHT_MEDIUM);")
define PANGO-WIGHT-SEMIBOLD (inline-c result "= GIN_IM_FROM_INT(PANGO_WEIGHT_SEMIBOLD);")
define PANGO-WEIGHT-BOLD (inline-c result "= GIN_IM_FROM_INT(PANGO_WEIGHT_BOLD);")
define PANGO-WEIGHT-ULTRABOLD (inline-c result "= GIN_IM_FROM_INT(PANGO_WEIGHT_ULTRABOLD);")
define PANGO-WEIGHT-HEAVY (inline-c result "= GIN_IM_FROM_INT(PANGO_WEIGHT_HEAVY);")
define PANGO-WEIGHT-ULTRAHEAVY (inline-c result "= GIN_IM_FROM_INT(PANGO_WEIGHT_ULTRAHEAVY);")

define PANGO-STYLE-NORMAL (inline-c result "= GIN_IM_FROM_INT(PANGO_STYLE_NORMAL);")
define PANGO-STYLE-OBLIQUE (inline-c result "= GIN_IM_FROM_INT(PANGO_STYLE_OBLIQUE);")
define PANGO-STYLE-ITALIC (inline-c result "= GIN_IM_FROM_INT(PANGO_STYLE_ITALIC);")

define PANGO-VARIANT-NORMAL (inline-c result "= GIN_IM_FROM_INT(PANGO_VARIANT_NORMAL);")
define PANGO-VARIANT-SMALL-CAPS (inline-c result "= GIN_IM_FROM_INT(PANGO_VARIANT_SMALL_CAPS);")

define PANGO-STRETCH-ULTRA-CONDENSED (inline-c result "= GIN_IM_FROM_INT(PANGO_STRETCH_ULTRA_CONDENSED);")
define PANGO-STRETCH-EXTRA-CONDENSED (inline-c result "= GIN_IM_FROM_INT(PANGO_STRETCH_EXTRA_CONDENSED);")
define PANGO-STRETCH-CONDENSED (inline-c result "= GIN_IM_FROM_INT(PANGO_STRETCH_CONDENSED);")
define PANGO-STRETCH-SEMI-CONDENSED (inline-c result "= GIN_IM_FROM_INT(PANGO_STRETCH_SEMI_CONDENSED);")
define PANGO-STRETCH-NORMAL (inline-c result "= GIN_IM_FROM_INT(PANGO_STRETCH_NORMAL);")
define PANGO-STRETCH-SEMI-EXPAND (inline-c result "= GIN_IM_FROM_INT(PANGO_STRETCH_SEMI_EXPANDED);")
define PANGO-STRETCH-EXPAND (inline-c result "= GIN_IM_FROM_INT(PANGO_STRETCH_EXPANDED);")
define PANGO-STRETCH-EXTRA-EXPANDED (inline-c result "= GIN_IM_FROM_INT(PANGO_STRETCH_EXTRA_EXPANDED);")
define PANGO-STRETCH-ULTRA-EXPANDED (inline-c result "= GIN_IM_FROM_INT(PANGO_STRETCH_ULTRA_EXPANDED);")

define PANGO-ALIGN-LEFT (inline-c result "= GIN_IM_FROM_INT(PANGO_ALIGN_LEFT);")
define PANGO-ALIGN-CENTER (inline-c result "= GIN_IM_FROM_INT(PANGO_ALIGN_CENTER);")
define PANGO-ALIGN-RIGHT (inline-c result "= GIN_IM_FROM_INT(PANGO_ALIGN_RIGHT);")


; PangoContext
define Pango::context-list-families (context)
  inline-c "gin_pango_context_list_families(" context ");"


; PangoFontDescription
define Pango::font-description-new ()
  inline-c "GIN_NEW_NIM(" result ");"
  inline-c "GIN_NIM_SET_FOREIGN(" result ", \
    (PangoFontDescription *)pango_font_description_new () \
  );"

define Pango::font-description-from-string (str)
  inline-c "GIN_NEW_NIM(" result ");"
  inline-c "GIN_NIM_SET_FOREIGN(" result ", \
    (PangoFontDescription *)pango_font_description_from_string(GIN_STR_VALUE(" str ")) \
  );"

; A font description family can be either serif or sans
define Pango::font-description-set-family (font-description family)
  inline-c "pango_font_description_set_family( \
    (PangoFontDescription *)GIN_NIM_GET_FOREIGN(" font-description "), \
    (char *)GIN_STR_VALUE(" family  ") \
  );"

define Pango::font-description-set-weight (font-description weight)
  inline-c "pango_font_description_set_weight( \
    (PangoFontDescription *)GIN_NIM_GET_FOREIGN(" font-description "), \
    (int)GIN_IM_TO_INT(" weight  ") \
  );"

define Pango::font-description-set-absolute-size (font-description size)
  inline-c "pango_font_description_set_absolute_size( \
    (PangoFontDescription *)GIN_NIM_GET_FOREIGN(" font-description "), \
    (double)GIN_NIM_GET_FLONUM(" size ") \
  );"

define Pango::font-description-free (font-description)
  ; TODO - fix leak 
  noop


; Cairo
define Pango::cairo-create-layout (cr)
  inline-c "GIN_NEW_NIM(" result ");"
  inline-c "GIN_NIM_SET_FOREIGN(" result ", \
    (PangoLayout *)pango_cairo_create_layout(GIN_NIM_GET_FOREIGN(" cr ")) \
  );"

define Pango::cairo-show-layout (cr layout)
  inline-c "pango_cairo_show_layout( \
    (cairo_t *)GIN_NIM_GET_FOREIGN(" cr "), \
    (PangoLayout *)GIN_NIM_GET_FOREIGN(" layout ") \
  );"


; PangoLayout
define Pango::layout-get-context (layout)
  inline-c "GIN_NEW_NIM(" result ");"
  inline-c "GIN_NIM_SET_FOREIGN(" result ", \
    (PangoContext *)pango_layout_get_context(GIN_NIM_GET_FOREIGN(" layout ")) \
  );"

define Pango::layout-set-text (layout text (text-len null))
  if (Null? text-len)
    set text-len (String::length text)
  inline-c "pango_layout_set_text( \
    (PangoLayout *)GIN_NIM_GET_FOREIGN(" layout "), \
    (char *)GIN_STR_VALUE(" text "), \
    (int)GIN_IM_TO_INT(" text-len ") \
  );"

define Pango::layout-set-markup (layout markup (markup-len null))
  if (Null? markup-len)
    set markup-len (String::length markup)
  inline-c "pango_layout_set_markup( \
    (PangoLayout *)GIN_NIM_GET_FOREIGN(" layout "), \
    (char *)GIN_STR_VALUE(" markup "), \
    (int)GIN_IM_TO_INT(" markup-len ") \
  );"

define Pango::layout-set-font-description (layout font-description)
  inline-c "pango_layout_set_font_description( \
    (PangoLayout *)GIN_NIM_GET_FOREIGN(" layout "), \
    (PangoFontDescription *)GIN_NIM_GET_FOREIGN(" font-description ") \
  );"

define Pango::layout-set-width (layout width)
 inline-c "pango_layout_set_width( \
    (PangoLayout *)GIN_NIM_GET_FOREIGN(" layout "), \
    (int)GIN_IM_TO_INT(" width ") \
  );"

define Pango::layout-get-width (layout)
  inline-c result "= GIN_IM_FROM_INT(pango_layout_get_width((PangoLayout *)GIN_NIM_GET_FOREIGN(" layout ")));"

define Pango::layout-set-height (layout height)
  inline-c "pango_layout_set_height( \
     (PangoLayout *)GIN_NIM_GET_FOREIGN(" layout "), \
     (int)GIN_IM_TO_INT(" height ") \
  );"

define Pango::layout-get-height (layout)
  inline-c result "= GIN_IM_FROM_INT(pango_layout_get_height((PangoLayout *)GIN_NIM_GET_FOREIGN(" layout ")));"

define Pango::layout-get-extents-logical-height (layout)
  define hack 0
  inline-c "pango_layout_get_size((PangoLayout *)GIN_NIM_GET_FOREIGN(" layout "), \
    NULL, \
    (int *)&(" hack ") \
  );"
  inline-c result "= GIN_IM_FROM_INT(((int)" hack "));"

define Pango::layout-index-to-y (layout index)
  inline-c result "= gin_pango_layout_index_to_y(" layout ", " index ");"

define Pango::layout-set-indent (layout indent)
  inline-c "pango_layout_set_indent( \
     (PangoLayout *)GIN_NIM_GET_FOREIGN(" layout "), \
     (int)GIN_IM_TO_INT(" indent ") \
  );"

define Pango::layout-get-indent (layout)
  inline-c result "= GIN_IM_FROM_INT(pango_layout_get_indent(GIN_NIM_GET_FOREIGN(" layout ")));"

define Pango::layout-set-spacing (layout spacing)
  inline-c "pango_layout_set_spacing( \
     (PangoLayout *)GIN_NIM_GET_FOREIGN(" layout "), \
     (int)GIN_IM_TO_INT(" spacing ") \
  );"

define Pango::layout-set-justify (layout justify)
  inline-c "pango_layout_set_justify( \
     (PangoLayout *)GIN_NIM_GET_FOREIGN(" layout "), \
     (gboolean)GIN_IM_TO_BOOL(" justify ") \
  );"

define Pango::layout-set-alignment (layout alignment)
  inline-c "pango_layout_set_alignment( \
     (PangoLayout *)GIN_NIM_GET_FOREIGN(" layout "), \
     (int)GIN_IM_TO_INT(" alignment ") \
  );"

define g-object-unref (layout)
  ; TODO - fix leak
  noop

